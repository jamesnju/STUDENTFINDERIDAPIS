generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int          @id @default(autoincrement())
  name              String
  email             String       @unique
  password          String
  role              Role         @default(STUDENT)
  lostIDs           LostID[]
  foundIDs          FoundID[]
  sentMessages      Message[]    @relation("SentMessages")
  receivedMessages  Message[]    @relation("ReceivedMessages")
  notifications     Notification[] @relation("UserNotifications")
  auditLogs         AuditLog[]   @relation("UserAuditLogs")

  user1Chats        Chat[]       @relation("User1Chats")
  user2Chats        Chat[]       @relation("User2Chats")
}

model LostID {
  id          Int      @id @default(autoincrement())
  userId      Int
  name        String
  admissionNo String
  image       String  // Store only the filename with extension
  description String?
  reportedAt  DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model FoundID {
  id          Int      @id @default(autoincrement())
  userId      Int
  name        String
  admissionNo String
  location    String
  image       String  // Store only the filename with extension
  description String?
  reportedAt  DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  createdAt DateTime @default(now())
  user      User     @relation("UserNotifications", fields: [userId], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  text       String
  sentAt     DateTime @default(now())

  sender     User @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User @relation("ReceivedMessages", fields: [receiverId], references: [id])

  chat       Chat?  @relation("ChatMessages", fields: [chatId], references: [id])
  chatId     Int?
}

model Chat {
  id         Int      @id @default(autoincrement())
  user1Id    Int
  user2Id    Int
  createdAt  DateTime @default(now())
  messages   Message[] @relation("ChatMessages")

  user1      User @relation("User1Chats", fields: [user1Id], references: [id])
  user2      User @relation("User2Chats", fields: [user2Id], references: [id])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  action    String
  userId    Int
  timestamp DateTime @default(now())
  user      User     @relation("UserAuditLogs", fields: [userId], references: [id])
}

enum Role {
  STUDENT
  ADMIN
}
